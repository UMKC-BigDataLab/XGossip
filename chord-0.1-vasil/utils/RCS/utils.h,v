head	1.24;
access;
symbols;
locks; strict;
comment	@ * @;


1.24
date	2012.10.25.17.19.58;	author vsfgd;	state Exp;
branches;
next	1.23;

1.23
date	2012.03.15.16.53.14;	author vsfgd;	state Exp;
branches;
next	1.22;

1.22
date	2011.11.23.20.41.42;	author vsfgd;	state Exp;
branches;
next	1.21;

1.21
date	2011.02.20.02.03.39;	author vsfgd;	state Exp;
branches;
next	1.20;

1.20
date	2010.11.27.17.58.50;	author vsfgd;	state Exp;
branches;
next	1.19;

1.19
date	2010.10.18.04.48.03;	author vsfgd;	state Exp;
branches;
next	1.18;

1.18
date	2010.10.11.16.05.51;	author vsfgd;	state Exp;
branches;
next	1.17;

1.17
date	2010.09.15.00.35.45;	author vsfgd;	state Exp;
branches;
next	1.16;

1.16
date	2010.08.25.00.21.48;	author vsfgd;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.07.01.33.05;	author vsfgd;	state Exp;
branches;
next	1.14;

1.14
date	2010.05.08.23.31.25;	author vsfgd;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.14.21.58.22;	author vsfgd;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.12.03.36.21;	author vsfgd;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.03.13.31.00;	author dp244;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.03.13.17.09;	author dp244;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.02.04.15.37;	author dp244;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.02.04.14.12;	author dp244;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.02.04.12.53;	author dp244;	state Exp;
branches;
next	1.6;

1.6
date	2010.03.28.16.30.25;	author vsfgd;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.17.00.19.37;	author vsfgd;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.15.20.27.29;	author vsfgd;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.08.03.03.00;	author dp244;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.08.03.01.49;	author dp244;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.08.02.53.14;	author dp244;	state Exp;
branches;
next	;


desc
@dipali, 3/7/10: Added uniqueSet method.
@


1.24
log
@compression
@
text
@/*	$Id: utils.h,v 1.23 2012/03/15 16:53:14 vsfgd Exp vsfgd $	*/

// Author: Praveen Rao
#ifndef _UTILS_H_
#define _UTILS_H_

#include <string>
#include <vector>
#include <map>
#include <fstream>

#include "../tools/poly.h"
#include "../tools/nodeparams.h"
#include "../tools/retrievetypes.h"

//using namespace std;
 std::string cleanString(std::string &);
 double getgtod();
const int MAXKEYLEN = 1028;
const int PAGESIZE = 8192;
const int MAXBUFS = 2000;

// vsfgd
//const str GSOCK = "g-sock";

// dp244: all LSH code
class lsh {
	public:
	// constructor
	// k = number of elements in the signature
	// l = number of independent hash functions in each group (r rows)
	// m = number of groups (b bands)
	// n = random number seed
	lsh(int kc, int lc, int mc, int nc, int colc = 0, std::vector<POLY> irrnumbers, std::vector<int> hasha, std::vector<int> hashb) {
		k = kc;
		l = lc;
		m = mc;
		n = nc;
		col = colc;

		// loading poly's
		/*
		std::ifstream polystream;
		polystream.open(irrfile.c_str());
		POLY number;
		std::vector<POLY> numbers;
		while (polystream >> number) {
			numbers.push_back(number);
		}
		polystream.close();
		*/

		//randomly choose a poly
		srand(n);
		int range = irrnumbers.size() + 1;
		int rand_index = int((double)range*rand()/(RAND_MAX + 1.0));

		selected_poly = irrnumbers[rand_index];
		//irrpolyf = irrfile;
		//hashf = hashfile;

		// loading hash funcs
		highest = n;
		/*
		std::ifstream hashstream;
		hashstream.open(hashfile.c_str());
		int hashnum;
		randa.clear();
		randb.clear();
		int z = 0;
		while (hashstream >> hashnum) {
			++z;
			if (z <= l)
				randa.push_back(hashnum);
			else
				randb.push_back(hashnum);
		}
		assert(randa.size() == randb.size());
		assert((int)randa.size() == l);
		hashstream.close();
		*/
		irrnums.clear();
		randa.clear();
		randb.clear();
		irrnums = irrnumbers;
		randa = hasha;
		randb = hashb;
	}

	// destructor
	~lsh() {};
	std::vector<POLY> getHashCodeFindMod(std::vector<POLY>& S,POLY polNumber);
	std::vector<chordID> getHashCode(std::vector<POLY>& S);
	POLY isMinimum(std::vector<POLY>& v);
	POLY getIRRPoly();
        std::vector<POLY> getUniqueSet(std::vector<POLY> inputPols);
	// obsolete: instead give prime number when you create LSH object
	//int getPrimeNumberFromConfig(char* configFileName);

	// private variables
	private:
	int k;
	int l;
	int m;
	int n;
	int col;
        POLY selected_poly;
	//std::string irrpolyf;
	//std::string hashf;
	std::vector<POLY> irrnums;
	std::vector<int> randa;
	std::vector<int> randb;
	int highest;
};

enum OPTYPE {
    EQUAL = 0,
    GREATER = 1,
    LESS = 2,
    GREATEREQUAL = 3,
    LESSEQUAL = 4
};

const int MAXSIGSPERQUERY = 50;
#define NODEID int
// Distinct tags
const char *const TAGFILE = ".tags";
const char *const PATHTAGFILE = ".ptags";
const char *const TAGDEPTH = ".tdepth";
const char *const BEGINTAG = "--BEGINTAG--";
const char *const ENDTAG = "--ENDTAG--";
const char *const PATHFILE = ".path";
const char *const HISTFILE = ".hist";
const char *const TEXTHASHFILE = ".texthash";
const char *const VALFILE = ".value";

// Polynomial related
const POLY testPoly = (1 << MAXMODDEGREE);
const POLY ONEFLAG = 0xffffffff;
const POLY lowerBitsMask = ONEFLAG;

 POLY modularMultPoly(POLY, POLY, IRRPOLY);
 POLY findMod(void *, int, IRRPOLY);
 POLY remainder(std::vector<POLY> &, POLY);
	
 int getDegree(IRRPOLY);
 int getDegree(const std::vector<POLY>&);
 void multiplyPoly(std::vector<POLY>&, POLY);
 void multiplyPoly(std::vector<POLY>&, const std::vector<POLY>&, POLY);
 void multiplyPoly(std::vector<POLY>&, const std::vector<POLY>&, const std::vector<POLY>&);

 void addPoly(std::vector<POLY>&, const std::vector<POLY>&);

 void shiftLeft(std::vector<POLY>&, int);
 void shiftRight(std::vector<POLY>&, int);

 void remainder(std::vector<POLY>&, const std::vector<POLY>&, const std::vector<POLY>&);
 void gcd(std::vector<POLY>&, const std::vector<POLY>&, const std::vector<POLY>&);
 void gcdSpecial(std::vector<POLY>&, const std::vector<POLY>&, const std::vector<POLY>&);
 void lcm(std::vector<POLY>&, const std::vector<POLY>&);

// vsfgd
// copied from psi.C
struct CompareSig
{
	bool operator()(const std::vector<POLY>& s1, const std::vector<POLY>& s2) const
	{
		// Return TRUE if s1 < s2
		//warnx << "S1 size: " << s1.size() << " S2 size: " << s2.size() << "\n";
		if (s1.size() < s2.size()) return true;
		else if (s1.size() == s2.size()) {
			for (int i = 0; i < (int) s1.size(); i++) {
				if (s1[i] < s2[i]) return true;
				else if (s1[i] > s2[i]) return false;
			}
			return false;
		} else return false;
	}
};

// Interval for a node
struct Interval {
	int ln, ld, rn, rd;
	int level;
  int random;
	Interval() {
		ln = 0;
		ld = 1;
		rn = 1;
		rd = 1;
	}

    // == operator
    bool operator==(const Interval& testInt) {
        if (ln == testInt.ln && ld == testInt.ld &&
            rn == testInt.rn && rd == testInt.rd &&
            level == testInt.level) {
            return true;
        }
        else
            return false;
    }

    // != operator
    bool operator!=(const Interval& testInt) {
        if (ln == testInt.ln && ld == testInt.ld &&
            rn == testInt.rn && rd == testInt.rd &&
            level == testInt.level) {
            return false;
        }
        else
            return true;
    }

};

 str marshal_block(vec<str>&);
 vec<str> get_payload(char *, int);

 void getInterval(str&, Interval&);

 void getKeyValueSpecial(const char *, str&);

// vsfgd: push_sum
 void getKeyValue(str&, str&, double&, double&);
 void makeKeyValue(char **, int&, str&, double&, double& InsertType);
 void getKeyValue(const char *, str&, double&, double&);

// vsfgd: vxgossip/xgossip
 int getKeyValueLen(const char* buf);
 InsertType getKeyValueType(const char* buf);

// vsfgd: vxgossip/xgossip exec
 int getKeyValue(const char*, str&, str&, std::vector<std::vector<POLY> >&, std::vector<double>&, std::vector<double>&, int&, int);
 void makeKeyValue(char **, int&, str&, str&, std::map<std::vector<POLY>, std::vector<double>, CompareSig>&, int&, InsertType);
// with compression
void makeKeyValue(char **, int&, str&, str&, std::vector<POLY>&, std::vector<std::vector<unsigned char> >&, std::vector<double>&, std::vector<double>&, int&, InsertType);
int getKeyValue(const char*, str&, str&, std::vector<POLY>&, std::vector<std::vector<unsigned char> >&, int&, std::vector<double>&, std::vector<double>&, int&, int);
// with compression, long double
void makeKeyValue(char **, int&, str&, str&, std::vector<POLY>&, std::vector<std::vector<unsigned char> >&, std::vector<long double>&, std::vector<long double>&, int&, InsertType);
int getKeyValue(const char*, str&, str&, std::vector<POLY>&, std::vector<std::vector<unsigned char> >&, int&, std::vector<long double>&, std::vector<long double>&, int&, int);

// vsfgd: xgossip query
int getKeyValue(const char*, str&, str&, str&, std::vector<POLY>&, int&, int);
void makeKeyValue(char **, int&, str&, str&, str&, std::vector<POLY>&, int&, InsertType);

// vsfgd: xgossip init
 int getKeyValue(const char*, str&, str&, std::vector<POLY>&, double&, double&, int);
 void makeKeyValue(char **, int&, str&, str&, std::vector<POLY>&, double&, double&, InsertType);
// vsfgd: xgossip inform_team
 int getKeyValue(const char*, str&, int);
 void makeKeyValue(char **, int&, str&, std::vector<chordID>&, InsertType);

// vsfgd: gpsi (old)
 void makeKeyValue(char **, int&, str&, std::map<std::vector<POLY>, double, CompareSig>&, std::map<std::vector<POLY>, double, CompareSig>&, int&, InsertType);

 void getKeyValue(str&, str&, str&);
 void getKeyValue(const char *, str&, str&);
 void getKeyValue(const char*, str&, std::vector<POLY>&);
 void getDocid(const char *, std::vector<POLY>&, str&);

 void makeKeyValue(char **, int&, str&, std::vector<POLY>&, InsertType);
 void makeKeyValue(char **, int&, str&, Interval&, InsertType);
 void makeKeyValue(char **, int&, vec<str>&, std::vector<int>&, InsertType);
 void makeKeyValueSpecial(char **, int&, vec<str>&, std::vector<int>&, InsertType);
 void makeKeyValue(char **, int&, str&, Interval&);
 void makeKeyValue(char **, int&, str&, std::vector<POLY>&, Interval&,
    InsertType);
 void makeKeyValue(char **ptr, int& len, std::vector<POLY>& textHash,
    std::vector<POLY>& sig, int docId, InsertType type);
 void makeDocid(char **ptr, int *ptrlen, std::vector<POLY>& sig, char *docid);

 void cleanup(char *);
 std::string getString(str &);
 void readTags(FILE *, std::vector<std::string>&);

 void updateMBR(std::vector<POLY>&, std::vector<POLY>&);
 bool isValue(std::string& input);
void lcmSpecial(std::vector<POLY>& t, const std::vector<POLY>& s, std::vector<POLY>& g);
int pSimOpt(std::vector<POLY>&, std::vector<POLY>&, std::vector<POLY>&, bool);
int pSim(std::vector<POLY>&, std::vector<POLY>&,
	std::vector<POLY>&, bool);
str pickChild(vec<str>&, std::vector<POLY>&, bool);
str pickChildV(vec<str>&, std::vector<POLY>&);
int enlargement(std::vector<POLY>&, std::vector<POLY>&);
void makeSigData(str& sigdata, std::vector<std::vector<POLY> >& listOfSigs, 
	std::vector<POLY>& valSig, enum OPTYPE OP, enum RetrieveType type);
void makeSigData(str& sigdata, std::vector<std::vector<POLY> >& listOfSigs, enum RetrieveType type);
void makeSigData(str& sigdata, std::vector<std::vector<POLY> >& listOfSigs, std::vector<POLY>&, enum OPTYPE, enum RetrieveType type);
void makeSigData(str& sigdata, std::vector<POLY>& mySig, enum RetrieveType type);
int randomNumGen(int r);
int randomNumGenZ(int r);
bool isStrValue(std::string& input);

// raopr: all compression code

bool compressSignatures(std::vector<std::vector<POLY> >&, 
			std::vector<POLY>&, std::vector<std::vector<unsigned char> >&);
bool uncompressSignatures(std::vector<std::vector<POLY> >&, 
			  std::vector<POLY>&, std::vector<std::vector<unsigned char> >&, int);

void makeKeyValue(char **, std::vector<POLY>&, 
		  std::vector<std::vector<unsigned char> >&, int);

void getKeyValue(const char *, std::vector<POLY>&, 
		 std::vector<std::vector<unsigned char> >&, int&);

#endif
@


1.23
log
@send DTD name with query
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.22 2011/11/23 20:41:42 vsfgd Exp vsfgd $	*/
d239 3
@


1.22
log
@added get/makeKeyValue for compression
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.21 2011/02/20 02:03:39 vsfgd Exp vsfgd $	*/
d241 2
a242 2
int getKeyValue(const char*, str&, str&, std::vector<POLY>&, int&, int);
void makeKeyValue(char **, int&, str&, str&, std::vector<POLY>&, int&, InsertType);
@


1.21
log
@make/getKeyValues for teamIDs
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.20 2010/11/27 17:58:50 vsfgd Exp vsfgd $	*/
d229 1
a229 1
// vsfgd: xgossip/xgossip+
d233 1
a233 1
// vsfgd: xgossip/xgossip+ exec
d236 7
d244 1
a244 1
// vsfgd: xgossip+ init
d247 1
a247 1
// vsfgd: xgossip+ inform_team
d291 14
@


1.20
log
@don't modify sig when converting from multiset to set
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.19 2010/10/18 04:48:03 vsfgd Exp vsfgd $	*/
d233 3
a235 3
// vsfgd: xgossip
 int getKeyValue(const char*, str&, std::vector<std::vector<POLY> >&, std::vector<double>&, std::vector<double>&, int&, int);
 void makeKeyValue(char **, int&, str&, std::map<std::vector<POLY>, std::vector<double>, CompareSig>&, int&, InsertType);
d238 2
a239 2
 int getKeyValue(const char*, str&, std::vector<POLY>&, double&, double&, int);
 void makeKeyValue(char **, int&, str&, std::vector<POLY>&, double&, double&, InsertType);
@


1.19
log
@load irrpolyfile and hashfile contents in memory (don't read the files on every lsh object creation)
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.18 2010/10/11 16:05:51 vsfgd Exp vsfgd $	*/
d96 1
a96 1
        void getUniqueSet(std::vector<POLY>& inputPols);
@


1.18
log
@read hash funcs from file
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.17 2010/09/15 00:35:45 vsfgd Exp vsfgd $	*/
d34 1
a34 1
	lsh(int kc, int lc, int mc, int nc, int colc = 0, std::string irrfile, std::string hashfile) {
d42 1
d51 1
d55 1
a55 1
		int range = numbers.size() + 1;
d58 3
a60 3
		selected_poly = numbers[rand_index];
		irrpolyf = irrfile;
		hashf = hashfile;
d64 1
d81 7
a87 1

d108 3
a110 2
	std::string irrpolyf;
	std::string hashf;
@


1.17
log
@fixed lsh
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.16 2010/08/25 00:21:48 vsfgd Exp vsfgd $	*/
d34 1
a34 1
	lsh(int kc, int lc, int mc, int nc, int colc = 0, std::string fileName) {
d42 2
a43 2
		std::ifstream txt;
		txt.open(fileName.c_str());
d46 1
a46 1
		while (txt >> number) {
d49 1
a49 1
		txt.close();
d57 2
a58 1
		irrpoly = fileName;
d60 5
a64 8
		// initialize l hash functions
		int random_integer_a;
	        int random_integer_b;
        	int lowest_a = 1, highest_a = -9;
		int lowest_b = 0, highest_b = -9;
		highest = highest_a = highest_b = n;
		int range_a = (highest_a - lowest_a) + 1;
		int range_b = (highest_b - lowest_b) + 1;
d67 7
a73 7
		for (int i = 0; i < l; i++) {
			random_integer_a  = lowest_a +
				int((double)range_a*rand()/(RAND_MAX + 1.0));
			random_integer_b  = lowest_b +
				int((double)range_b*rand()/(RAND_MAX + 1.0)); 
			randa.push_back(random_integer_a);
			randb.push_back(random_integer_b);
d75 3
d99 2
a100 1
	std::string irrpoly;
@


1.16
log
@added col for getting only the 1st col of matrix
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.15 2010/06/07 01:33:05 vsfgd Exp vsfgd $	*/
d58 20
d99 3
@


1.15
log
@added randomNumGenZ
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.14 2010/05/08 23:31:25 vsfgd Exp vsfgd $	*/
d34 1
a34 1
	lsh(int kc, int lc, int mc, int nc, std::string fileName) {
d39 1
d76 1
@


1.14
log
@code cleanup
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.13 2010/04/14 21:58:22 vsfgd Exp vsfgd $	*/
d245 1
@


1.13
log
@minor
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.12 2010/04/12 03:36:21 vsfgd Exp vsfgd $	*/
d192 1
a192 1
// vsfgd: xgossip
d195 2
d204 2
a205 1
 void makeKeyValue(char **, int&, std::vector<chordID>&, InsertType);
@


1.12
log
@inform_team initial
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.11 2010/04/03 13:31:00 dp244 Exp vsfgd $	*/
a65 3
	// new version
	//void multiplyPoly(std::vector<POLY>& result, const std::vector<POLY>& mult, POLY multiplier);
         //void multiplyPoly(std::vector<POLY>& result, const std::vector<POLY>& mult, const std::vector<POLY>& multiplier);
a67 3
	// already in utils.C
	//int getDegree(IRRPOLY);
	//POLY findMod(void *, int, IRRPOLY);
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.10 2010/04/03 13:17:09 dp244 Exp dp244 $	*/
d198 1
a198 1
// vsfgd: gpsi (current)
d204 1
a204 1
// vsfgd lsh
d207 2
@


1.10
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.9 2010/04/02 04:15:37 dp244 Exp $	*/
d67 1
a67 1
	void multiplyPoly(std::vector<POLY>& result, const std::vector<POLY>& mult, POLY multiplier);
@


1.9
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.8 2010/04/02 04:14:12 dp244 Exp dp244 $	*/
d68 1
a68 1
         void multiplyPoly(std::vector<POLY>& result, const std::vector<POLY>& mult, const std::vector<POLY>& multiplier);
@


1.8
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.7 2010/04/02 04:12:53 dp244 Exp dp244 $	*/
d68 1
a68 1
         void multiplyPoly(std::vector<POLY>& result, const std::vector<POLY>& mult, const std::vector<POLY> multiplier);
@


1.7
log
@*** empty log message ***
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.6 2010/03/28 16:30:25 vsfgd Exp dp244 $	*/
d68 1
a68 1
         void multiplyPoly(std::vector<POLY>& result, const std::vector<POLY>& mult, std::vector<POLY> multiplier);
@


1.6
log
@added makeKeyValue and getKeyValue for xgossip+ init
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.5 2010/03/17 00:19:37 vsfgd Exp vsfgd $	*/
d68 1
a68 1

@


1.5
log
@re-added multiplyPoly (different version)
@
text
@d1 1
a1 1
/*	$Id: utils.h,v 1.4 2010/03/15 20:27:29 vsfgd Exp vsfgd $	*/
d200 1
d204 4
a212 1
 void getKeyValue(const char*, str&, std::vector<POLY>&, double&, int&);
a215 1
 void makeKeyValue(char **, int&, str&, std::vector<POLY>&, double&, int&, InsertType);
@


1.4
log
@commented deleted functions
added irrpoly name as a private member
@
text
@d1 1
a1 1
/*	$Id$	*/
d65 3
a67 1
        std::vector<POLY> getUniqueSet(std::vector<POLY>& inputPols);
@


1.3
log
@minor fix.
@
text
@d1 2
d26 1
a26 1
// dp244
d56 1
d61 1
a62 1
	std::vector<POLY> getHashCodeFindMod(std::vector<POLY>& S,POLY polNumber);
a63 3
	int getPrimeNumberFromConfig(char* configFileName);
	POLY findMod(void *, int, IRRPOLY);
	int getDegree(IRRPOLY);
a64 1
// new dp244
d67 6
d80 1
d200 1
@


1.2
log
@minor fixes: DP.
@
text
@d66 1
a66 1
        std::vector<POLY> getUniqueSet(vector<POLY>& inputPols);
@


1.1
log
@Initial revision
@
text
@d66 1
a66 1
        vector<POLY> getUniqueSet(vector<POLY>& inputPols);
@
